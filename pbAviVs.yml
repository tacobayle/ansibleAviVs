---
- hosts: localhost
  connection: local
  gather_facts: no


  vars_files:
    - "vars/creds.json"
    - "vars/params.yml"

  roles:
    - role: "avinetworks.avisdk"

  tasks:


    - name: get Ipam DNS Profile
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: ipamdnsproviderprofile
      register: ipamDnsOutput
      tags:
        - ipamdns

    - name: Retrieve domainName
      set_fact:
        domainName: "{{ item.internal_profile.dns_service_domain.0.domain_name }}"
      loop: "{{ ipamDnsOutput.obj.results }}"
      when: item.type == "IPAMDNS_TYPE_INTERNAL_DNS"
      tags:
        - ipamdns

    # - name: Debug
    #   debug:
    #     msg: "{{ domainName }}"



    - name: Retrieve IPAM Network details
      set_fact:
        networkUuid: "{{ item.internal_profile.usable_network_refs.0.split('/network/')[1] }}"
      loop: "{{ ipamDnsOutput.obj.results }}"
      when: item.type == "IPAMDNS_TYPE_INTERNAL"

    # - name: Debug
    #   debug:
    #     msg: "{{ networkUuid }}"

    - name: get Network details
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - ipamdns

    - name: Retrieve Network details
      set_fact:
        networkName: "{{ item.name }}"
        networkMask: "{{ item.configured_subnets.0.prefix.mask }}"
        networkAddress: "{{ item.configured_subnets.0.prefix.ip_addr.addr }}"
        networkType: "{{ item.configured_subnets.0.prefix.ip_addr.type }}"
      loop: "{{ networkOutput.obj.results }}"
      when: item.uuid == networkUuid
      tags:
        - ipamdns

    # - name: Debug
    #   debug:
    #     msg: "{{ networkName }}"
    #
    # - name: Debug
    #   debug:
    #     msg: "{{ networkMask }}"
    #
    # - name: Debug
    #   debug:
    #     msg: "{{ networkAddress }}"
    #
    # - name: Debug
    #   debug:
    #     msg: "{{ networkType }}"

    - name: Create HTTP health monitor
      avi_healthmonitor:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        http_monitor:
          http_request: "{{ item.http_request }}"
          http_response_code: "{{ item.http_response_code }}"
        receive_timeout: "{{ item.receive_timeout }}"
        failed_checks: "{{ item.failed_checks }}"
        send_interval: "{{ item.send_interval }}"
        successful_checks: "{{ item.successful_checks }}"
        type: "{{ item.type }}"
      loop: "{{ avi_healthmonitor }}"
      when:
        - item.type == "HEALTH_MONITOR_HTTP"
        - avi_healthmonitor is defined
      tags:
        - hm

    - name: Create pool without server
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool.lb_algorithm }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs }}"
        #servers: "{{ item.servers }}"
      when:
        - avi_pool is defined
      tags:
        - pool

    - name: update pool with servers
      avi_pool:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_patch_op : add
        avi_api_update_method: put
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_servers }}"
      when:
        - avi_servers is defined
        - avi_pool is defined
      tags:
        - pool

    - name: Create vsvip
      avi_vsvip:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domainName) }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(network.name) }}"
              subnet:
                mask: "{{ item.mask | default(network.subnet.0.prefix.mask) }}"
                ip_addr:
                  type: "{{ item.type | default(network.subnet.0.prefix.ip_addr.type) }}"
                  addr: "{{ item.addr | default(network.subnet.0.prefix.ip_addr.addr) }}"
      register: OutputVsVip
      loop: "{{ avi_vsvip }}"
      when:
        - avi_vsvip is defined
      tags:
        - vsvip

    - name: Debug
      debug:
        msg: "{{ OutputVsVip }}"
      tags:
        - debug

    - name: Create HTTP Virtualservice (based on Dynamic IP - Ipam and DNS)
      avi_virtualservice:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "{{ item.vsvip_ref | default(OutputVsVip.results.0.obj.uuid) }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 10
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true



      loop: "{{ avi_virtualservice.http }}"
      register: OutputVsHttp
      when:
        - avi_vsvip is defined
      tags:
        - vs
